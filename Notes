import requests
import json
import pandas as pd
import logging

logging.basicConfig(
    filename="pr_fetcher.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

class GitHubPRFetcher:
    def __init__(self, api_token, base_api_url):
        self.headers = {
            "Authorization": f"Bearer {api_token}",
            "Content-Type": "application/json",
        }
        self.base_api_url = base_api_url

    def get_pull_requests(self, contributor):
        try:
            query = f"{self.base_api_url}/search/issues?q=author:{contributor}&type=pr"
            response = requests.get(query, headers=self.headers)
            if response.status_code == 200:
                logging.info(f"Pull requests fetched for {contributor}")
                return response.json()
            else:
                logging.error(f"Failed to fetch pull requests for {contributor}: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            logging.error(f"Error fetching pull requests for {contributor}: {e}")
            return None

    def check_for_reviews(self, pull_url):
        try:
            api_url = f"{pull_url}/reviews"
            response = requests.get(api_url, headers=self.headers)
            if response.status_code == 200:
                logging.info(f"Reviews fetched for {pull_url}")
                return response.json()
            else:
                logging.error(f"Failed to fetch reviews for {pull_url}: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            logging.error(f"Error fetching reviews for {pull_url}: {e}")
            return None

    def process_teams(self, teams_data):
        csv_data = []
        for team in teams_data:
            team_name = team.get("Name")
            for member in team.get("Members", []):
                pull_requests = self.get_pull_requests(member)
                if pull_requests and "items" in pull_requests:
                    for pull_request in pull_requests["items"]:
                        pull_url = pull_request.get("pull_request", {}).get("url", None)
                        if pull_url:
                            reviews = self.check_for_reviews(pull_url)
                            has_changes_requested = any(
                                item.get("state") == "CHANGES_REQUESTED" for item in reviews or []
                            )
                            csv_data.append({
                                "Team Name": team_name,
                                "Short Name": pull_request.get("user", {}).get("login", None),
                                "Repository URL": pull_request.get("repository_url", None),
                                "Title": pull_request.get("title", None),
                                "Created At": pull_request.get("created_at", None),
                                "Updated At": pull_request.get("updated_at", None),
                                "PR Changes": has_changes_requested,
                            })
                        else:
                            logging.warning(f"Pull URL not found for member: {member}")
                else:
                    logging.warning(f"No pull requests found for member: {member}")
        return csv_data


def read_json(file_path):
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
            logging.info(f"Successfully read JSON file: {file_path}")
            return data
    except Exception as e:
        logging.error(f"Error reading JSON file {file_path}: {e}")
        return []


def save_to_csv(data, output_file):
    try:
        df = pd.DataFrame(data)
        df.to_csv(output_file, index=False)
        logging.info(f"Data successfully saved to CSV: {output_file}")
    except Exception as e:
        logging.error(f"Error saving data to CSV: {e}")


if __name__ == "__main__":
    API_TOKEN = "your_api_token_here"
    BASE_API_URL = "https://api.github.com"
    TEAMS_JSON_FILE = "teams.json"
    OUTPUT_CSV_FILE = "pull_requests.csv"

    pr_fetcher = GitHubPRFetcher(api_token=API_TOKEN, base_api_url=BASE_API_URL)
    teams_data = read_json(TEAMS_JSON_FILE)
    csv_data = pr_fetcher.process_teams(teams_data)
    save_to_csv(csv_data, OUTPUT_CSV_FILE)
    print(f"Data saved to {OUTPUT_CSV_FILE}")